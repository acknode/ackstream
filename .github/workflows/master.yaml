name: Master/Staging CI

on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.head_commit.message, 'ci') }}
    steps:
      - uses: actions/checkout@v1

      - name: setup Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.19"

      # Get values for cache paths to be used in later steps
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      # Cache go build cache, used to speedup go test
      - name: cache build
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache, used to speedup builds
      - name: cache mod
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: install dependencies
        run: |
          echo "machine github.com login ${{ secrets.UPMESH_GITHUB_USER }} password ${{ secrets.UPMESH_GITHUB_TOKEN }}" > $HOME/.netrc
          go get
          go version

      - name: linter
        run: |
          go vet .

      - name: test CI
        run: |
          bash scripts/ci_test.sh

  prepare:
    runs-on: ubuntu-latest
    needs: [test]
    outputs:
      ENABLED_ECR: ${{ steps.CHECK_ECR.outputs.ENABLED }}
      BUILD_ID: ${{ steps.BUILD_ID.outputs.ID }}
    steps:
      - id: CHECK_ECR
        env:
          ECR_USERNAME: ${{ secrets.ECR_USERNAME }}
        if: "${{ env.ECR_USERNAME != '' }}"
        run: echo "::set-output name=ENABLED::true"

      - id: BUILD_ID
        run: |
          branch=${GITHUB_REF##*/}
          sha=${GITHUB_SHA::8}
          ts=$(date +%s)
          echo "::set-output name=ID::stg-${sha}-${ts}"

  ecr:
    runs-on: ubuntu-latest
    needs: [prepare]
    if: ${{ needs.prepare.outputs.ENABLED_ECR == 'true' }}
    steps:
      - uses: actions/checkout@v1

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: push to AWS ECR
        run: |
          docker build . --tag ${{ secrets.ECR_USERNAME }}/ackstream:${{ needs.prepare.outputs.BUILD_ID }}
          docker push ${{ secrets.ECR_USERNAME }}/ackstream:${{ needs.prepare.outputs.BUILD_ID }}
